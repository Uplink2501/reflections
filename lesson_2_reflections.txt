What happens when you initialize a repository? Why do you need to do it?
  Initializing a repository creates a hidden directory .git which is used to index files and their commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
  The staging area simply collects files to be tracked by the repository. Working directory contains all files being worked on,
  including tracked and non-tracked files. The repository only tracks changes to files which are being tracked.
  The benefit is flexibility to work on any file in any state, and when logically complete, to stage collections of related files to be included and therefore tracked in the repository.

How can you use the staging area to make sure you have one commit per logical change?
  By checking the difference against the last commit (git diff --staged) to review the code, or by reviewing all files that have been added to the staging area as a high level

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
  Branches would be helpful when you need a stable release version to persist for a period of time or for a specific set of users.
  Meanwhile, bug fixes, new features or works in progress can exist in parallel for other uses to interact.
  Having a branch for various systems (acceptance testing, training, developing) would benefit from own branches.
  Variations in product code for different market segments would benefit by having their own branch (multiple production variants).
